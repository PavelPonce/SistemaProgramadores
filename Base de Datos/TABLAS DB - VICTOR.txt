ALTER PROCEDURE [Acces].[SP_Usuarios_Insertar] (
	@Usuar_Usuario VARCHAR(50),
	@Usuar_Contrasena NVARCHAR(MAX), -- Use NVARCHAR for better password storage
	@Instr_Id INT,
	@Roles_Id INT,
	@Usuar_Admin BIT ,
	@Usuar_UsuarioCreacion INT ,
	@Usuar_FechaCreacion DATETIME
)
AS
BEGIN

	BEGIN TRY
			DECLARE @HashedPassword NVARCHAR(MAX);
			SET @HashedPassword = CONVERT(NVARCHAR(MAX), HASHBYTES('SHA2_512', @Usuar_Contrasena),2);

			INSERT INTO [Acces].[tbUsuarios] (
				[Usuar_Usuario],
				[Usuar_Contrasena], -- Store the hashed password
				[Instr_Id],
				[Roles_Id],
				[Usuar_Admin],
				[Usuar_UsuarioCreacion],
				[Usuar_FechaCreacion]
			)
			VALUES (
				@Usuar_Usuario,
				@HashedPassword,
				@Instr_Id,
				@Roles_Id,
				@Usuar_Admin,
				@Usuar_UsuarioCreacion,
				@Usuar_FechaCreacion
			)
		SELECT 1
	END TRY
	BEGIN CATCH
		SELECT 0
	END CATCH
END

ALTER PROCEDURE [Acces].[SP_Usuarios_Login]
	@Usuario VARCHAR(50),
	@Contrasena NVARCHAR(50)
AS
BEGIN
	BEGIN TRY
		DECLARE @HASHBYTES NVARCHAR(MAX) = CONVERT(NVARCHAR (MAX), HASHBYTES ('SHA2_512', @Contrasena), 2);		
		SELECT @HASHBYTES
		SELECT	usu.Usuar_Id,
				usu.Usuar_Contrasena,
				CONCAT(per.Perso_PrimerNombre,' ',CASE WHEN per.Perso_SegundoNombre IS NULL THEN '' ELSE per.Perso_SegundoNombre + ' ' END, per.Perso_PrimerApellido, CASE WHEN per.Perso_SegundoApellido IS NULL THEN '' ELSE ' ' + per.Perso_SegundoNombre END) AS Perso_NombreCompleto,
				per.*
		FROM Acces.tbUsuarios AS usu INNER JOIN Acade.tbInstructores AS ins
			ON usu.Instr_Id = ins.Perso_Id INNER JOIN Mante.tbPersonas AS per
			ON ins.Perso_Id = per.Perso_Id
		WHERE usu.Usuar_Usuario = @Usuario AND usu.Usuar_Contrasena = @HASHBYTES;
		SELECT 1
	END TRY
	BEGIN CATCH
		SELECT 0
	END CATCH
END
------------------------------------------------------------------------------------
ALTER PROCEDURE [Acces].[SP_PantallasPorRoles_InsertarEliminar] (
	@Panta_IdsXML XML,
	@Roles_Id INT,
	@Papro_UsuarioCreacion INT,
	@Papro_FechaCreacion DATETIME
)
AS
BEGIN
	BEGIN TRY
		DECLARE @SQLquery NVARCHAR(MAX) = ''
		DECLARE Cursor_PantallasPorRoles CURSOR FOR
			SELECT
				x.y.value('.', 'INT') AS Panta_Id,
				x.y.value('local-name(.)', 'BIT') AS EsInsercion
			FROM
				@Panta_IdsXML.nodes('/Panta_IdsXML/*') AS x(y);
		OPEN Cursor_PantallasPorRoles
		DECLARE @Panta_Id INT, @EsInsercion INT
		FETCH NEXT FROM Cursor_PantallasPorRoles INTO @Panta_Id, @EsInsercion
		WHILE @@FETCH_STATUS = 0
		BEGIN
			IF @EsInsercion = 1
			BEGIN
				SET @SQLquery += 'INSERT INTO Acces.tbPantallasPorRoles(Panta_Id, Roles_Id, Papro_UsuarioCreacion, Papro_FechaCreacion) VALUES('+CAST(@Panta_Id AS VARCHAR(5))+', '+CAST(@Roles_Id AS VARCHAR(5))+', '+CAST(@Papro_UsuarioCreacion AS VARCHAR(5))+', '''+ CAST(@Papro_FechaCreacion AS VARCHAR(30)) +''');'
			END
			ELSE
			BEGIN
				SET @SQLquery += 'DELETE FROM Acces.tbPantallasPorRoles WHERE Panta_Id = '+CAST(@Panta_Id AS VARCHAR(5))+' AND Roles_Id = '+CAST(@Roles_Id AS VARCHAR(5))+';'
			END
			FETCH NEXT FROM Cursor_PantallasPorRoles INTO @Panta_Id, @EsInsercion
		END
		CLOSE Cursor_PantallasPorRoles
		DEALLOCATE Cursor_PantallasPorRoles;
		EXEC sp_executesql @SQLquery;
		SELECT 1
	END TRY
	BEGIN CATCH
		SELECT ERROR_MESSAGE();
		SELECT 0;
	END CATCH
END
-------------------------------------------------------------------------------------
CREATE PROCEDURE [Acces].[SP_PantallasPorRoles_Seleccionar]
	@Roles_Id INT
AS
BEGIN 
	SELECT
		tbPantallasPorRoles.Papro_Id,
		tbPantallasPorRoles.Roles_Id,
		tbPantallasPorRoles.Panta_Id
	FROM Acces.tbPantallasPorRoles
	WHERE tbPantallasPorRoles.Roles_Id = @Roles_Id
END
--------------------------------------------------------------------------------------
ALTER PROCEDURE [Calif].[SP_Calificaciones_Seleccionar](
	@Curso_Id INT,
	@Gener_Id INT
)
AS 
BEGIN
	BEGIN TRY
		CREATE TABLE #tbActividadesPorCurso (
			ALUMNO VARCHAR(60)	
		)
		DECLARE @SQLquery NVARCHAR(MAX) = ''
		DECLARE Cursor_Actividades CURSOR FOR
			SELECT
				CONCAT(tbActividades.Activ_Nombre, ' ', tbActividadesPorCursoPorGeneracion.ActCG_Nota) AS ACTIVIDAD,
				tbCursos.Curso_Nombre AS CURSO,
				tbGeneraciones.Gener_Anhio AS GENERACION_AÃ‘O
			FROM Acade.tbInstructoresPorCursoPorGeneracion AS tbInstructoresPorCursoPorGeneracion INNER JOIN Acade.tbCursos AS tbCursos
				ON tbInstructoresPorCursoPorGeneracion.Curso_Id = tbCursos.Curso_Id INNER JOIN Acade.tbGeneraciones AS tbGeneraciones
				ON tbInstructoresPorCursoPorGeneracion.Gener_Id = tbGeneraciones.Gener_Id INNER JOIN Calif.tbActividadesPorCursoPorGeneracion AS tbActividadesPorCursoPorGeneracion
				ON tbInstructoresPorCursoPorGeneracion.InsCG_Id = tbActividadesPorCursoPorGeneracion.InsCG_Id INNER JOIN Calif.tbActividades AS tbActividades
				ON tbActividadesPorCursoPorGeneracion.Activ_Id = tbActividades.Activ_Id
			WHERE tbInstructoresPorCursoPorGeneracion.Curso_Id = @Curso_Id AND tbInstructoresPorCursoPorGeneracion.Gener_Id = @Gener_Id
		OPEN Cursor_Actividades
		DECLARE @Actividad VARCHAR(60), @Curso_Nombre VARCHAR(30), @Gener_Anhio INT
		FETCH NEXT FROM Cursor_Actividades INTO @Actividad, @Curso_Nombre, @Gener_Anhio
		WHILE @@FETCH_STATUS = 0
		BEGIN
			SET @SQLquery += 'ALTER TABLE #tbActividadesPorCurso ADD ['+@Actividad+'%] NUMERIC(4,2) DEFAULT 0;'
			FETCH NEXT FROM Cursor_Actividades INTO @Actividad, @Curso_Nombre, @Gener_Anhio
		END
			SET @SQLquery += 'ALTER TABLE #tbActividadesPorCurso ADD CURSO VARCHAR(30); ALTER TABLE #tbActividadesPorCurso ADD GENERACION VARCHAR(30);'
		CLOSE Cursor_Actividades
		DEALLOCATE Cursor_Actividades;

		EXEC sp_executesql @SQLquery;
		SET @SQLquery = ''

		DECLARE Cursor_Notas CURSOR FOR
			SELECT
				CONCAT(tbPersonas.Perso_PrimerNombre, ' ', tbPersonas.Perso_PrimerApellido) AS ALUMNO,
				CONCAT(tbActividades.Activ_Nombre, ' ', tbActividadesPorCursoPorGeneracion.ActCG_Nota) AS ACTIVIDAD,
				tbCalificaciones.Calif_Nota AS NOTA,
				tbCursos.Curso_Nombre AS CURSO,
				tbGeneraciones.Gener_Nombre AS GENERACION
			FROM Acade.tbInstructoresPorCursoPorGeneracion AS tbInstructoresPorCursoPorGeneracion INNER JOIN Acade.tbCursos AS tbCursos
				ON tbInstructoresPorCursoPorGeneracion.Curso_Id = tbCursos.Curso_Id INNER JOIN Acade.tbGeneraciones AS tbGeneraciones
				ON tbInstructoresPorCursoPorGeneracion.Gener_Id = tbGeneraciones.Gener_Id INNER JOIN Calif.tbActividadesPorCursoPorGeneracion AS tbActividadesPorCursoPorGeneracion
				ON tbInstructoresPorCursoPorGeneracion.InsCG_Id = tbActividadesPorCursoPorGeneracion.InsCG_Id INNER JOIN Calif.tbActividades AS tbActividades
				ON tbActividadesPorCursoPorGeneracion.Activ_Id = tbActividades.Activ_Id INNER JOIN Calif.tbCalificaciones AS tbCalificaciones
				ON tbActividadesPorCursoPorGeneracion.ActCG_Id = tbCalificaciones.ActCG_Id INNER JOIN Acade.tbAlumnos AS tbAlumnos
				ON tbCalificaciones.Alumn_Id = tbAlumnos.Perso_Id INNER JOIN Mante.tbPersonas AS tbPersonas
				ON tbAlumnos.Perso_Id = tbPersonas.Perso_Id
			WHERE tbInstructoresPorCursoPorGeneracion.Curso_Id = @Curso_Id AND tbInstructoresPorCursoPorGeneracion.Gener_Id = @Gener_Id
		OPEN Cursor_Notas
		DECLARE @Alumno VARCHAR(60), @ColumnaActividad VARCHAR(60), @Nota NUMERIC(4,2), @Curso VARCHAR(30), @Generacion VARCHAR(30)
		FETCH NEXT FROM Cursor_Notas INTO @Alumno, @ColumnaActividad, @Nota, @Curso, @Generacion
		DECLARE @AlumnosYaIngresados TABLE(NOMBREALUMNO VARCHAR(60))
		WHILE @@FETCH_STATUS = 0
		BEGIN 
			IF (SELECT COUNT(*) FROM @AlumnosYaIngresados WHERE NOMBREALUMNO = @Alumno) > 0
			BEGIN
				SET @SQLquery += 'UPDATE #tbActividadesPorCurso SET ['+@ColumnaActividad+'%] = '+CAST(@Nota AS VARCHAR(5))+' WHERE #tbActividadesPorCurso.ALUMNO = '''+@Alumno+''';';
			END
			ELSE
			BEGIN
				SET @SQLquery += 'INSERT INTO #tbActividadesPorCurso(ALUMNO, ['+@ColumnaActividad+'%], CURSO, GENERACION) VALUES('''+@Alumno+''', '+CAST(@Nota AS VARCHAR(5))+', '''+@Curso+''', '''+@Generacion+''');'
				INSERT INTO @AlumnosYaIngresados SELECT @Alumno
				--SET @SQLquery += 'INSERT INTO #tbActividadesPorCurso(ALUMNO, ['+@ColumnaActividad+'%]) VALUES('''+@Alumno+''', '+CAST(@Nota AS VARCHAR(5))+');'
			END
			FETCH NEXT FROM Cursor_Notas INTO @Alumno, @ColumnaActividad, @Nota, @Curso, @Generacion
		END
		CLOSE Cursor_Notas
		DEALLOCATE Cursor_Notas;
		EXEC sp_executesql @SQLquery;
		SELECT * FROM #tbActividadesPorCurso;
		DROP TABLE #tbActividadesPorCurso;
	END TRY
	BEGIN CATCH
		SELECT 0
	END CATCH
END
------------------------------------------------------------
[HttpPost]
public JsonResul CardarDDLmunicipios(string Dep_Id)
{
	var municipios = db.SP_().ToList();
	return Json();
}
---------------------------------------------------------------
//TRIGGER ELIMINAR tbAlumnos
CREATE TRIGGER TG_tbAlumnos_DELETE
	ON Acade.tbAlumnos
	AFTER DELETE
AS
BEGIN
	INSERT INTO tbAlumnosBitacora(
		 Perso_Id, 
		 CenEd_IdColegio, 
		 CenEd_IdUniversidad, 
		 Titul_Id, 
		 Alumn_UsuarioCreacion, 
		 Alumn_FechaCreacion, 
		 Alumn_UsuarioModificacion, 
		 Alumn_FechaModificacion, 
		 Alumn_Estado, 
		 Alumn_Observaciones, 
		 Alumn_FechaIngreso, 
		 AlBit_Accion, 
		 AlBit_FechaAccion
	)
	SELECT
		Perso_Id, 
		CenEd_IdColegio, 
		CenEd_IdUniversidad, 
		Titul_Id, 
		Alumn_UsuarioCreacion, 
		Alumn_FechaCreacion, 
		Alumn_UsuarioModificacion, 
		Alumn_FechaModificacion, 
		Alumn_Estado, 
		Alumn_Observaciones, 
		Alumn_FechaIngreso,
        'E',
		GETDATE()
    FROM
        DELETED;
END
--------------------------------------------------------------------------------

//TRIGGER MODIFICAR tbAlumnos
CREATE TRIGGER TG_tbAlumnos_UPDATE
	ON Acade.tbAlumnos
	AFTER UPDATE
AS
BEGIN
	INSERT INTO tbAlumnosBitacora(
		 Perso_Id, 
		 CenEd_IdColegio, 
		 CenEd_IdUniversidad, 
		 Titul_Id, 
		 Alumn_UsuarioCreacion, 
		 Alumn_FechaCreacion, 
		 Alumn_UsuarioModificacion, 
		 Alumn_FechaModificacion, 
		 Alumn_Estado, 
		 Alumn_Observaciones, 
		 Alumn_FechaIngreso, 
		 AlBit_Accion, 
		 AlBit_FechaAccion
	)
	SELECT
		Perso_Id, 
		CenEd_IdColegio, 
		CenEd_IdUniversidad, 
		Titul_Id, 
		Alumn_UsuarioCreacion, 
		Alumn_FechaCreacion, 
		Alumn_UsuarioModificacion, 
		Alumn_FechaModificacion, 
		Alumn_Estado, 
		Alumn_Observaciones, 
		Alumn_FechaIngreso,
        'M',
		GETDATE()
    FROM
        INSERTED;
END
--------------------------------------------------------------------------------
//TRIGGER INSERTAR tbAlumnos
CREATE TRIGGER TG_tbAlumnos_INSERT
	ON Acade.tbAlumnos
	AFTER INSERT
AS
BEGIN
	INSERT INTO tbAlumnosBitacora(
		 Perso_Id, 
		 CenEd_IdColegio, 
		 CenEd_IdUniversidad, 
		 Titul_Id, 
		 Alumn_UsuarioCreacion, 
		 Alumn_FechaCreacion, 
		 Alumn_UsuarioModificacion, 
		 Alumn_FechaModificacion, 
		 Alumn_Estado, 
		 Alumn_Observaciones, 
		 Alumn_FechaIngreso, 
		 AlBit_Accion, 
		 AlBit_FechaAccion
	)
	SELECT
		Perso_Id, 
		CenEd_IdColegio, 
		CenEd_IdUniversidad, 
		Titul_Id, 
		Alumn_UsuarioCreacion, 
		Alumn_FechaCreacion, 
		Alumn_UsuarioModificacion, 
		Alumn_FechaModificacion, 
		Alumn_Estado, 
		Alumn_Observaciones, 
		Alumn_FechaIngreso,
        'I',
		GETDATE()
    FROM
        INSERTED;
END
--------------------------------------------------------------------------------
//BITACORA DE ALUMNOS
CREATE TABLE [Acade].[tbAlumnosBitacora](
	[Perso_Id] [int],
	[CenEd_IdColegio] [int],
	[CenEd_IdUniversidad] [int],
	[Titul_Id] [int],
	[Alumn_UsuarioCreacion] [int],
	[Alumn_FechaCreacion] [datetime],
	[Alumn_UsuarioModificacion] [int],
	[Alumn_FechaModificacion] [datetime],
	[Alumn_Estado] [bit],
	[Alumn_Observaciones] [varchar](150),
	[Alumn_FechaIngreso] [datetime],
	AlBit_Accion CHAR(1) NOT NULL,
	AlBit_FechaAccion DATETIME,
	CONSTRAINT CK_tbAlumnosBitacora_AlBit_Accion CHECK(AlBit_Accion IN('I', 'M', 'E'))
)
----------------------------------------------------------------------------------
//SP_tbCalificaciones_SELECT
SELECT
		CONCAT(tbPersonas.Perso_PrimerNombre, ' ', tbPersonas.Perso_PrimerApellido) AS ALUMNO,
		tbCalificaciones.Calif_Nota AS NOTA,
		CONCAT(tbActividades.Activ_Nombre, ' ', tbActividadesPorCursoPorGeneracion.ActCG_Nota) AS ACTIVIDAD,
		tbCursos.Curso_Nombre AS CURSO,
		tbGeneraciones.Gener_Estado AS GENERACION_AÃ‘O
	FROM Acade.tbCursosPorGeneracion AS tbCursosPorGeneracion INNER JOIN Acade.tbCursos AS tbCursos
		ON tbCursosPorGeneracion.Curso_Id = tbCursos.Curso_Id INNER JOIN Acade.tbGeneraciones AS tbGeneraciones
		ON tbCursosPorGeneracion.Gener_Id = tbGeneraciones.Gener_Id INNER JOIN Calif.tbActividadesPorCursoPorGeneracion AS tbActividadesPorCursoPorGeneracion
		ON tbCursosPorGeneracion.CuGen_Id = tbActividadesPorCursoPorGeneracion.CuGen_Id	INNER JOIN Calif.tbActividades AS tbActividades
		ON tbActividadesPorCursoPorGeneracion.Activ_Id = tbActividades.Activ_Id INNER JOIN Calif.tbCalificaciones AS tbCalificaciones
		ON tbActividadesPorCursoPorGeneracion.ActCG_Id = tbCalificaciones.ActCG_Id INNER JOIN Acade.tbAlumnos AS tbAlumnos
		ON tbCalificaciones.Alumn_Id = tbAlumnos.Perso_Id INNER JOIN Mante.tbPersonas AS tbPersonas
		ON tbAlumnos.Perso_Id = tbPersonas.Perso_Id
	WHERE tbCursosPorGeneracion.Curso_Id = 1 AND tbCursosPorGeneracion.Gener_Id = 1
--------------------------------------------------------------------------------------------------------
ALTER PROCEDURE [Mante].[SP_tbMunicipios_INSERTAR]	
(
	@Munic_Id VARCHAR(4),
	@Munic_Descripcion VARCHAR(50),
	@Depar_Id VARCHAR(2),
	@Munic_UsuarioCreacion INT,
	@Munic_FechaCreacion DATETIME
)
AS 
BEGIN
	INSERT INTO Mante.tbMunicipios(Munic_Id, Munic_Descripcion, Depar_Id, Munic_UsuarioCreacion, Munic_FechaCreacion)
	VALUES(@Munic_Id, @Munic_Descripcion, @Depar_Id, @Munic_UsuarioCreacion, @Munic_FechaCreacion)
END
---------------------------------------------------------------------
CREATE SCHEMA Acade
GO
CREATE SCHEMA Calif
GO
CREATE TABLE Acade.tbCursos(
	Curso_Id INT IDENTITY,
	Curso_Nombre VARCHAR(30) UNIQUE NOT NULL,
	[Curso_UsuarioCreacion] [int] NOT NULL,
	[Curso_FechaCreacion] [datetime] NOT NULL,
	[Curso_UsuarioModificacion] [int] NULL,
	[Curso_FechaModificacion] [datetime] NULL,
	[Curso_Estado] [bit] DEFAULT 1,
	CONSTRAINT PK_tbCursos_Curso_Id PRIMARY KEY(Curso_Id),
	CONSTRAINT FK_tbCursos_tbUsuarios_Curso_UsuarioCreacion FOREIGN KEY(Curso_UsuarioCreacion) REFERENCES Acces.tbUsuarios(Usuar_Id),
	CONSTRAINT FK_tbCursos_tbUsuarios_Curso_UsuarioModificacion FOREIGN KEY(Curso_UsuarioModificacion) REFERENCES Acces.tbUsuarios(Usuar_Id)
);
CREATE TABLE Acade.tbGeneraciones(
	Gener_Id INT IDENTITY,
	Gener_Nombre VARCHAR(30) UNIQUE NOT NULL,
	Gener_Anhio INT UNIQUE NOT NULL,
	[Gener_UsuarioCreacion] [int] NOT NULL,
	[Gener_FechaCreacion] [datetime] NOT NULL,
	[Gener_UsuarioModificacion] [int] NULL,
	[Gener_FechaModificacion] [datetime] NULL,
	[Gener_Estado] [bit] DEFAULT 1,
	CONSTRAINT PK_tbGeneraciones_Gener_Id PRIMARY KEY(Gener_Id),
	CONSTRAINT CK_tbGeneraciones_Gener_Anhio CHECK(Gener_Anhio >= 1900),
	CONSTRAINT FK_tbGeneraciones_tbUsuarios_Gener_UsuarioModificacion FOREIGN KEY(Gener_UsuarioModificacion) REFERENCES Acces.tbUsuarios(Usuar_Id),
	CONSTRAINT FK_tbGeneraciones_tbUsuarios_Gener_UsuarioCreacion FOREIGN KEY(Gener_UsuarioCreacion) REFERENCES Acces.tbUsuarios(Usuar_Id)
);
CREATE TABLE Acade.tbCursosPorGeneracion(
	CuGen_Id INT IDENTITY,
	Curso_Id INT NOT NULL,
	Gener_Id INT NOT NULL,
	[CuGen_UsuarioCreacion] [int] NOT NULL,
	[CuGen_FechaCreacion] [datetime] NOT NULL,
	[CuGen_UsuarioModificacion] [int] NULL,
	[CuGen_FechaModificacion] [datetime] NULL,
	[CuGen_Estado] [bit] DEFAULT 1,
	CONSTRAINT PK_tbCursosPorGeneracion_CuGen_Id PRIMARY KEY(CuGen_Id),
	CONSTRAINT FK_tbCursosPorGeneracion_tbGeneraciones_Gener_Id FOREIGN KEY(Gener_Id) REFERENCES Acade.tbGeneraciones(Gener_Id),
	CONSTRAINT FK_tbCursosPorGeneracion_tbCursos_Curso_Id FOREIGN KEY(Curso_Id) REFERENCES Acade.tbCursos(Curso_Id),
	CONSTRAINT FK_tbCursosPorGeneracion_tbUsuarios_CuGen_UsuarioCreacion FOREIGN KEY(CuGen_UsuarioCreacion) REFERENCES Acces.tbUsuarios(Usuar_Id),
	CONSTRAINT FK_tbCursosPorGeneracion_tbUsuarios_CuGen_UsuarioModificacion FOREIGN KEY(CuGen_UsuarioModificacion) REFERENCES Acces.tbUsuarios(Usuar_Id)
);
CREATE TABLE Calif.tbActividades(
	Activ_Id INT IDENTITY,
	Activ_Nombre VARCHAR(30) UNIQUE NOT NULL,
	[Activ_UsuarioCreacion] [int] NOT NULL,
	[Activ_FechaCreacion] [datetime] NOT NULL,
	[Activ_UsuarioModificacion] [int] NULL,
	[Activ_FechaModificacion] [datetime] NULL,
	[Activ_Estado] [bit] DEFAULT 1,
	CONSTRAINT PK_tbActividades_Activ_Id PRIMARY KEY(Activ_Id),
	CONSTRAINT FK_tbActividades_tbUsuarios_Activ_UsuarioCreacion FOREIGN KEY(Activ_UsuarioCreacion) REFERENCES Acces.tbUsuarios(Usuar_Id),
	CONSTRAINT FK_tbActividades_tbUsuarios_Activ_UsuarioModificacion FOREIGN KEY(Activ_UsuarioModificacion) REFERENCES Acces.tbUsuarios(Usuar_Id)
);
CREATE TABLE Calif.tbActividadesPorCursoPorGeneracion(
	ActCG_Id INT IDENTITY,
	Activ_Id INT NOT NULL,
	CuGen_Id INT NOT NULL,
	ActCG_Nota NUMERIC(4,2) NOT NULL,
	[ActCG_UsuarioCreacion] [int] NOT NULL,
	[ActCG_FechaCreacion] [datetime] NOT NULL,
	[ActCG_UsuarioModificacion] [int] NULL,
	[ActCG_FechaModificacion] [datetime] NULL,
	[ActCG_Estado] [bit] DEFAULT 1,
	CONSTRAINT PK_tbActividadesPorCursoPorGeneracion_ActCG_Id PRIMARY KEY(ActCG_Id),
	CONSTRAINT FK_tbActividadesPorCursoPorGeneracion_tbActividades_Activ_Id FOREIGN KEY(Activ_Id) REFERENCES Calif.tbActividades(Activ_Id),
	CONSTRAINT FK_tbActividadesPorCursoPorGeneracion_tbCursosPorGeneracion_CuGen_Id FOREIGN KEY(CuGen_Id) REFERENCES Acade.tbCursosPorGeneracion(CuGen_Id),
	CONSTRAINT FK_tbActividadesPorCursoPorGeneracion_tbUsuarios_ActCG_UsuarioCreacion FOREIGN KEY(ActCG_UsuarioCreacion) REFERENCES Acces.tbUsuarios(Usuar_Id),
	CONSTRAINT FK_tbActividadesPorCursoPorGeneracion_tbUsuarios_ActCG_UsuarioModificacion FOREIGN KEY(ActCG_UsuarioModificacion) REFERENCES Acces.tbUsuarios(Usuar_Id)
);
CREATE TABLE Acade.tbInstructoresPorCursoPorGeneracion(
	InsCG_Id INT IDENTITY,
	Instr_Id INT NOT NULL,
	CuGen_Id INT NOT NULL,
	[InsCG_UsuarioCreacion] [int] NOT NULL,
	[InsCG_FechaCreacion] [datetime] NOT NULL,
	[InsCG_UsuarioModificacion] [int] NULL,
	[InsCG_FechaModificacion] [datetime] NULL,
	[InsCG_Estado] [bit] DEFAULT 1,
	CONSTRAINT PK_tbInstructoresPorCursoPorGeneracion_InsCG_Id PRIMARY KEY(InsCG_Id),
	CONSTRAINT FK_tbInstructoresPorCursoPorGeneracion_tbInstructores_Instr_Id FOREIGN KEY(Instr_Id) REFERENCES Acade.tbInstructores(Instr_Id),
	CONSTRAINT FK_tbInstructoresPorCursoPorGeneracion_tbCursosPorGeneracion_CuGen_Id FOREIGN KEY(CuGen_Id) REFERENCES Acade.tbCursosXgeneracion(CuGen_Id),
	CONSTRAINT FK_tbInstructoresPorCursoPorGeneracion_tbUsuarios_InsCG_UsuarioCreacion FOREIGN KEY(InsCG_UsuarioCreacion) REFERENCES Acces.tbUsuarios(Usuar_Id),
	CONSTRAINT FK_tbInstructoresPorCursoPorGeneracion_tbUsuarios_InsCG_UsuarioModificacion FOREIGN KEY(InsCG_UsuarioModificacion) REFERENCES Acces.tbUsuarios(Usuar_Id)
);
CREATE TABLE Calif.tbCalificaciones(
	Calif_Id INT IDENTITY,
	CuGen_Id INT NOT NULL,
	Alumn_Id INT NOT NULL,
	Calif_Nota NUMERIC(4,2),
	[Calif_UsuarioCreacion] [int] NOT NULL,
	[Calif_FechaCreacion] [datetime] NOT NULL,
	[Calif_UsuarioModificacion] [int] NULL,
	[Calif_FechaModificacion] [datetime] NULL,
	[Calif_Estado] [bit] DEFAULT 1,
	CONSTRAINT PK_tbCalificaciones_Calif_Id PRIMARY KEY(Calif_Id),
	CONSTRAINT FK_tbCalificaciones_tbCursosXgeneracion_CuGen_Id FOREIGN KEY(CuGen_Id) REFERENCES Acade.tbCursosXgeneracion(CuGen_Id),
	CONSTRAINT FK_tbCalificaciones_tbAlumnos_Alumn_Id FOREIGN KEY(Alumn_Id) REFERENCES Acade.tbAlumnos(Alumn_Id),
	CONSTRAINT FK_tbCalificaciones_tbUsuarios_Calif_UsuarioCreacion FOREIGN KEY(Calif_UsuarioCreacion) REFERENCES Acces.tbUsuarios(Usuar_Id),
	CONSTRAINT FK_tbCalificaciones_tbUsuarios_Calif_UsuarioModificacion FOREIGN KEY(Calif_UsuarioModificacion) REFERENCES Acces.tbUsuarios(Usuar_Id)
);
GO
ALTER PROCEDURE [dbo].[SP_tbCalificaciones_SeleccionarPorGeneracion](
	@Gener_Id INT
)
AS
BEGIN
	SELECT 
		tbAlumnos.Alumn_Nombre AS ALUMNO,
		tbCalificaciones.Calif_Nota AS NOTA,
		tbCursos.Curso_Nombre AS CURSO,
		tbActividadesXcursoXgeneracion.AcCur_Nota AS NOTA_ACTIVIDAD,
		tbGeneraciones.Gener_Nombre AS GENERACION
	FROM Calif.tbCalificaciones AS tbCalificaciones INNER JOIN Acade.tbAlumnos AS tbAlumnos
		ON tbCalificaciones.Alumn_Id = tbAlumnos.Alumn_Id INNER JOIN Acade.tbCursosPorGeneracion AS tbCursosPorGeneracion
		ON tbCalificaciones.CuGen_Id = tbCursosPorGeneracion.CuGen_Id INNER JOIN Acade.tbCursos AS tbCursos
		ON tbCursosPorGeneracion.Curso_Id = tbCursos.Curso_Id INNER JOIN Acade.tbGeneraciones AS tbGeneraciones
		ON tbCursosPorGeneracion.Gener_Id = tbGeneraciones.Gener_Id INNER JOIN Calif.tbActividadesPorCursoPorGeneracion AS tbActividadesPorCursoPorGeneracion
		ON tbCalificaciones.CuGen_Id = tbActividadesPorCursoPorGeneracion.CuGen_Id INNER JOIN Calif.tbActividades AS tbActividades
		ON tbActividadesPorCursoPorGeneracion.Activ_Id = tbActividades.Activ_Id
	WHERE tbCursosPorGeneracion.Gener_Id = @Gener_Id
END